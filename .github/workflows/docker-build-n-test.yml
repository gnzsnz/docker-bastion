name: OpenSSH Bastion Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  USER: bastion
  BASTION_PORT: 2222
  SERVER_PORT: 2022

jobs:
  build:
    name: Build and test OpenSSH Bastion
    strategy:
      matrix:
        image_os: [focal, jammy]
        runner_os: [20.04, 22.04]

    runs-on: ubuntu-${{ matrix.runner_os}}
    continue-on-error: true

    steps:
    - uses: actions/checkout@v3
    
    - name: Get enviroment variables
      run: |
        grep -v '#' .env-dist | grep '=' > .env
        while IFS= read -r line; do 
          echo $line >> $GITHUB_ENV ; 
        done < .env
    
    - name: Build OpenSSH Bastion Docker image
      run: |
        docker build . --file Dockerfile \
        --build-arg BASE_VERSION=${{ matrix.image_os }} \
        --tag ${{ github.repository }}:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }}

    - name: Build server and client image
      run: |
        docker build test/ --file test/Dockerfile \
        --build-arg BASE_VERSION=${{ matrix.image_os }} \
        --tag openssh:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }}

    - name: Run server and client
      run: |
        docker run -d -p ${{ env.SERVER_PORT }}:22 \
        --name server --add-host host.docker.internal:host-gateway \
        openssh:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }}
        docker run -d --name client --add-host host.docker.internal:host-gateway \
        openssh:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }}
        sleep 15

    - name: Provision and run OpenSSH Bastion
      run: |
        mkdir -vp data/home/${{ env.USER }}/.ssh
        docker ps
        # get authorized_keys from client
        docker cp client:/home/${{ env.USER }}/.ssh/authorized_keys \ 
        data/home/${{ env.USER }}/.ssh/authorized_keys
        docker cp client:/home/${{ env.USER }}/.ssh/known_hosts data/home/${{ env.USER }}/.ssh/known_hosts
        # provision bastion
        docker run --rm --env-file .env -v $PWD/data:/data \
        ${{ github.repository }}:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }} /provision.sh
        #
        # generate bastion known_hosts for client
        echo "[host.docker.internal]:${{ env.SSH_LISTEN_PORT }} "  $(<data/etc/ssh/ssh_host_ed25519_key.pub) >> /tmp/known_hosts
        echo "[host.docker.internal]:${{ env.SSH_LISTEN_PORT }} "  $(<data/etc/ssh/ssh_host_rsa_key.pub) >> /tmp/known_hosts
        #
        # copy known_host to client
        docker cp /tmp/known_hosts client:/tmp
        docker exec client tee -a /home/${{ env.USER }}/.ssh/known_hosts < /tmp/known_hosts
        #
        # run bastion
        docker run --env-file .env -p ${{ env.SSH_LISTEN_PORT }}:22 \
          -v $PWD/data/etc/passwd:/etc/passwd:ro \
          -v $PWD/data/etc/shadow:/etc/shadow:ro \
          -v $PWD/data/etc/group:/etc/group:ro \
          -v $PWD/data/etc/ssh:/etc/ssh:ro \
          -v $PWD/data/home:/home \
          --add-host host.docker.internal:host-gateway \
          --name bastion
          ${{ github.repository }}:${{ env.IMAGE_VERSION }}-${{ matrix.image_os }}
        

    - name: test bastion
      run: |
        docker exec client ssh ${{ env.USERS }}@host.docker.internal -p ${{ env.SERVER_PORT }} ssh -G
        #
        # through bastion
        docker exec client ssh ${{ env.USERS }}@host.docker.internal -p ${{ env.SERVER_PORT }} -J ${{ env.USERS }}@host.docker.internal:${{ env.SSH_LISTEN_PORT }} ssh -G
        docker logs -t bastion | grep "Accepted publickey for ${{ env.USER }}"
        docker logs -t bastion
        
